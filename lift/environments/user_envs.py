import gymnasium as gym
import numpy as np
from lift.environments.gym_envs import NpGymEnv
from lift.environments.simulator import SimulatorFactory, Simulator
from lift.controllers import EMGAgent

"""NOTE: in user study, emg_simulator should be actual device"""
class UserEnv(gym.Wrapper):
    """Environment controlled by user

    - Observations: game observation corrupted by emg policy
    - Actions: game actions generated by teacher
    """
    def __init__(self, env: NpGymEnv, emg_policy: EMGAgent, emg_simulator: Simulator):
        super().__init__(env)
        self.emg_policy = emg_policy
        self.emg_simulator = emg_simulator

    def reset(self):
        obs = self.env.reset()        
        return obs

    def step(self, action: np.ndarray):
        emg = self.emg_simulator(action.reshape(1, -1))
        decoded_action = self.emg_policy.sample_action({"emg_observation": emg})[-1]
        obs, rwd, done, info = self.env.step(decoded_action)
        return obs, rwd, done, info
    
if __name__ == "__main__":
    from configs import TeacherConfig, BaseConfig
    from lift.controllers import MITrainer
    from lift.rl.utils import gym_env_maker, apply_env_transforms
    from lift.rl.sac import SAC

    config = BaseConfig()
    teach_config = TeacherConfig()

    torchrl_env = apply_env_transforms(gym_env_maker("FetchReachDense-v2"))
    teacher = SAC(teach_config, torchrl_env, torchrl_env)
    
    data_path = (config.mad_data_path / "Female0"/ "training0").as_posix()
    sim = SimulatorFactory.create_class(
        data_path,
        config,
        return_features=True,
    )
    
    # test numpy emg env
    env = NpGymEnv("FetchReachDense-v2")
    emg_policy = MITrainer(config, env, teacher).encoder
    emg_policy = EMGAgent(emg_policy)
    env = UserEnv(env, emg_policy, sim)
    obs = env.reset()
    act = env.action_space.sample()
    next_obs, rwd, done, info = env.step(act)
    assert list(obs.keys()) == ["observation"]
    assert list(next_obs.keys()) == ["observation"]
    assert obs["observation"].shape == env.observation_space["observation"].shape
    assert next_obs["observation"].shape == env.observation_space["observation"].shape